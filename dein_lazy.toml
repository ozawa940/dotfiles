[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_event = 'InsertEnter'

[[plugins]]
repo = 'Shougo/neosnippet'
on_event = 'InsertEnter'
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_add = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''
hook_source = '''
    let g:neosnippet#snippets_directory = dein#get('neosnippet-snippets').path.'/neosnippets'
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'


[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_delay = 0
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#max_list = 10000
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"
    endfunction

		inoremap <silent><expr> <C-X>
		\ pumvisible() ? "\<C-n>" :
		\ <SID>check_back_space() ? "\<TAB>" :
		\ deoplete#mappings#manual_complete()
		function! s:check_back_space() abort "{{{
		let col = col('.') - 1
		return !col || getline('.')[col - 1]  =~ '\s'
		endfunction"}}}
'''


[[plugins]]
repo = 'honza/vim-snippets'
on_event = 'InsertEnter'


[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'InsertEnter'


[[plugins]]
repo = 'thinca/vim-quickrun'

#
# snippets
#
[[plugins]]
repo = 'zchee/deoplete-clang'
hook_source = '''
let g:deoplete#sources#clang#libclang_path = '/usr/local/Cellar/llvm/6.0.0/lib/libclang.dylib'
let g:deoplete#sources#clang#clang_header = '/usr/local/Cellar/llvm/6.0.0/lib/clang'
'''
on_ft = ['c', 'cpp', 'cmake']
on_event = 'InsertEnter'
depends = ['deoplete.nvim']

